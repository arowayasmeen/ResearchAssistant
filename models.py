from dataclasses import dataclass, field
from typing import Dict, List, Any, Optional


@dataclass
class MethodContribution:
    """A methodological contribution (algorithm, method, or technique) extracted from a paper."""
    id: str
    type: str  # "Algorithm", "Method", "Technique", "Trick"
    name: Optional[str] = None
    description: str = ""
    problem_solved: Optional[str] = None
    source_paper_id: str = ""
    location_in_paper: str = ""


@dataclass
class ProcessedPDF:
    """A processed PDF document with extracted metadata, content and contributions."""
    file_path: str
    metadata: Dict[str, Any]
    full_text: str
    sections: Dict[str, str]
    methodological_contributions: List[MethodContribution] = field(default_factory=list)


@dataclass
class Reference:
    """A reference to a source in the knowledge base."""
    source_id: str
    source_type: str  # "paper", "online", etc.
    context: str = ""


@dataclass
class ResearchIdea:
    """A research idea generated by the system."""
    id: str
    description: str
    inspiration_sources: List[Reference] = field(default_factory=list)
    novelty_rationale: Optional[str] = None


@dataclass
class EvaluationResult:
    """Result of evaluating a research idea."""
    score: float  # 0.0 to 1.0
    feedback: str


@dataclass
class MethodologyStructure:
    """Structure of a methodology."""
    type: str  # "sequential", "parallel", "ensemble", etc.
    steps: List[str]  # Algorithm IDs in order
    connections: List[Dict[str, Any]] = field(default_factory=list)


@dataclass
class HybridMethodology:
    """A synthesized methodology for implementing a research idea."""
    structure: MethodologyStructure
    components: List[Any]
    rationale: List[str] = field(default_factory=list)
    description: str = ""


@dataclass
class ValidationResult:
    """Result of validating generated code."""
    syntax_ok: bool
    basic_tests_passed: bool
    security_warnings: List[str] = field(default_factory=list)
    suggestions: List[str] = field(default_factory=list)


@dataclass
class CodeOutput:
    """Generated code with validation results."""
    code: str
    validation: ValidationResult
    notes: str = ""


@dataclass
class ResearchOutput:
    """Final output of the research generation process."""
    selected_idea: ResearchIdea
    synthesized_methodology: HybridMethodology
    generated_code: CodeOutput